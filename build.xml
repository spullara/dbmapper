<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2007, Dave Brown and Sam Pullara
  -->

<!-- ================================================ -->
<!--  Sample buildfile for jar components             -->
<!--                                                  -->
<!-- ================================================ -->

<project name="dbmap" default="build">

    <property name="src.home" value="src"/>
    <property name="test.home" value="test"/>
    <property name="test.out" value="test.out"/>
    <property name="build.home" value="classes"/>
    <property name="app.name" value="dbmap"/>
    <property name="dist.home" value="${basedir}/dist"/>
    <property name="lib" value="lib"/>

    <!-- need debug info for emma instrumenting to work -->
    <property name="compile.debug" value="true"/>
    <property name="test.db.sql" value="test-data/simplelock.sql"/>

    <path id="project.classpath">
        <fileset dir="lib" includes="jaxb/*.jar"/>
        <fileset dir="lib" includes="**/*.jar"/>
    </path>

    <path id="run.classpath">
        <pathelement location="${build.home}"/>
        <path refid="project.classpath"/>
    </path>

    <path id="test.db.classpath">
        <fileset dir="lib" includes="jaxb/*.jar"/>
        <fileset dir="lib" includes="**/*.jar"/>
        <fileset dir="test-lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- - - - - - - - - - - - - - -->
    <!--  target: init             -->
    <!-- - - - - - - - - - - - - - -->

    <target name="init">
        <echo>
            running the init target
            java.version = ${java.version}
            java.home = ${java.home}
            src.home = ${src.home}
            build.home = ${build.home}
            dist.home = ${dist.home}
            app.name = ${app.name}
        </echo>
    	<!--<fail message="intentionally break the build"/>-->
    </target>

    <!-- ========================= -->
    <!--   target: build           -->
    <!-- ========================= -->

    <target name="build" depends="init,clean,compile,test,fail-if-junit-failed"
            description="clean, compile, test"/>

   <target name="run" depends="compile" description="compile + run generator">
      <java classname="com.moonspider.dbmap.Generator" fork="true">
          <arg value="generate.xml"/>
            <classpath>
               <path refid="test.db.classpath"/>
               <pathelement location="${dist.home}/${app.name}.jar"/>
               <path refid="project.classpath"/>
            </classpath>
      </java>
    </target>

    <!-- target: compile -->
    <target name="compile"
            depends="init"
            description="--> compile and jar this component">
        <mkdir dir="${build.home}"/>
        <javac srcdir="${src.home}"
               destdir="${build.home}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}">
            <classpath refid="project.classpath"/>
        </javac>

        <mkdir dir="${dist.home}"/>
        <copy todir="${build.home}">
            <fileset dir="src" includes="**/*.template"/>
        </copy>
        <jar destfile="${dist.home}/${app.name}.jar"
             basedir="${build.home}"
             excludes="**/*UT.class">
            <zipgroupfileset dir="lib" includes="**/*.jar"/>
        </jar>
    </target>

    <!-- ================================= 
          target: test              
         ================================= -->
    <target name="test" depends="init" description="--> run junit tests">
        <mkdir dir="test-classes"/>
        <javac srcdir="test" destdir="test-classes">
            <classpath>
                <path refid="test.db.classpath"/>
                <pathelement location="${build.home}"/>
            </classpath>
        </javac>
        <mkdir dir="test-src"/>
        <copy file="test-data/generate.xml.template" tofile="test-src/generate.xml">
            <filterset>
                <filter token="test.db.url" value="jdbc:h2:mem:test_migration;DB_CLOSE_DELAY=-1"/>
                <filter token="test.dest.dir" value="test-src"/>
            </filterset>
        </copy>
        <mkdir dir="${test.out}"/>
        <junit printsummary="on" haltonfailure="false" haltonerror="false"
               failureproperty="junit.failure" fork="true" forkmode="once">
            <classpath>
                <path refid="test.db.classpath"/>
                <pathelement location="${build.home}"/>
                <pathelement location="test-classes"/>
                <pathelement location="${src.home}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${test.out}">
                <fileset dir="${test.home}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <javac srcdir="test-src" destdir="test-classes">
            <classpath>
                <path refid="test.db.classpath"/>
                <pathelement location="${build.home}"/>
            </classpath>
        </javac>
        <antcall target="fail-if-junit-failed"/>
    </target>

    <target name="fail-if-junit-failed" if="junit.failure">
        <fail message="junit failed, see reports"/>
    </target>

    <target name="clean" depends="init" description="clean the workspace">
        <delete dir="${dist.home}" failonerror="false"/>
        <delete dir="test-classes"/>
        <delete dir="test-src"/>
        <delete dir="target"/>
        <delete dir="${build.home}"/>
        <delete dir="${test.out}"/>
        <delete file="velocity.log"/>
    </target>

</project>
