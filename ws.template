/*
 * Copyright (c) 2006, Gauntlet Systems Corporation. All Rights Reserved.
 */

package ${ws.pkg};

import java.util.Collection;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

import gsc.util.EJB;

#foreach ($type in $ws.types)
import ${conf.pkg}.${type};
#end

@WebService()
@HandlerChain(file = "handlers.xml", name = "")
public class ${ws.className} {

    public ${ws.className}() { }

    /** BEGIN codegen finders **/
#foreach ($type in $ws.types)
        public ${type}[] get${type}sFinder(
           @WebParam(name = "whereclause")String whereclause,
           @WebParam(name = "offset")int offset,
           @WebParam(name = "len")int len
        ) {
            List<${type}> l = runQuery("SELECT x FROM ${type} x", whereclause, offset, len);
            ${type}[] ret = new ${type}[l.size()];
            l.toArray(ret);
            return ret;
        }
#end
    /** END codegen finders **/
    
    public Build getBuildById(@WebParam(name = "build_id")int id) {
        Build b = null;
        b = (Build) getEM().find(Build.class, id);
        return b;
    }

    public Change getChangeById(@WebParam(name = "change_id")int id) {
        return (Change) getEM().find(Change.class, id);
    }

    public Svnlog getSvnlogByChangeId(@WebParam(name = "change_id")int changeid) {
        Change c = getChangeById(changeid);
        if (c != null) {
            return c.getSvnlog();
        }
        return null;
    }
    
    public Project[] getAllProjects() {
        Project[] ret = null;
        List<Project> l = getEM().createQuery("FROM Project").getResultList();
        ret = new Project[l.size()];
        l.toArray(ret);
        return ret;
    }
    
    public Project getProjectById(@WebParam(name = "project_id")int id) {
        return (Project) getEM().find(Project.class, id);        
    }
    
    public Module[] getModulesByProjectId(@WebParam(name = "project_id")int id) {
        Module[] ret = null;
        Project p = getProjectById(id);
        if (p != null) {
            Collection<Module> mods = p.getModuleList();
            if (mods != null) {
                ret = new Module[mods.size()];
                mods.toArray(ret);
            }
        }
        return ret;
    }
    
    /**
     * Get builds by a particular user, in order of descending revision
     * id (i.e., most recent first)
     */
    public Build[] getBuildsByUser(
            @WebParam(name = "username")String username,
            @WebParam(name = "offset")int offset,
            @WebParam(name = "len")int len
            ) {
        String querystr = "SELECT b FROM Build b";
        if (username != null) {
            querystr += " WHERE b.change.svnlog.author=:username";
        }
        querystr += " ORDER BY b.change.revision DESC";
        Query q = getEM().createQuery(querystr);
//        Query q = getEM().createQuery(
//                "SELECT b FROM Build b WHERE b.change.svnlog.author=:username"
//                + " ORDER BY b.change.revision DESC"
//                );
        if (username != null) {
           q.setParameter("username", username);
        }
        q.setFirstResult(offset);
        q.setMaxResults(len);
        List<Build> l = q.getResultList();
        Build[] ret = new Build[l.size()];
        l.toArray(ret);
        return ret;
    }
    
    public Change[] getChanges(
            @WebParam(name = "project_id")int projectId,
            @WebParam(name = "module_id")int moduleId,
            @WebParam(name = "offset")int offset,
            @WebParam(name = "len")int len
            ) {
        Change[] ret = null;
        Query q;
        if (moduleId > 0) {
            q = getEM().createQuery(
                    "SELECT c FROM Change c WHERE "
                    + "c IN (SELECT cin FROM Module m JOIN m.changeList cin WHERE m.id=:mid)"
                    + " ORDER BY c.svnlog.date DESC"
                    );
            q.setParameter("mid", moduleId);
        } else if (projectId > 0) {
            q = getEM().createQuery(
                    "SELECT c FROM Change c WHERE "
                    + "c IN (SELECT cin FROM Module m JOIN m.changeList cin WHERE m.project.id=:pid)"
                    + " ORDER BY c.svnlog.date DESC"
                    );
            q.setParameter("pid", projectId);
        } else {
            q = getEM().createQuery(
                    "SELECT c FROM Change c ORDER BY c.svnlog.date DESC"
                    );
        }
        q.setFirstResult(offset);
        q.setMaxResults(len);
        List<Change> l = q.getResultList();
        ret = new Change[l.size()];
        l.toArray(ret);
        return ret;
    }

    public Build[] getModuleBuilds(
            @WebParam(name = "module_id")int moduleId,
            @WebParam(name = "offset")int offset,
            @WebParam(name = "len")int len
            ) {
        Build[] ret = null;
        Query q = getEM().createQuery(
                "SELECT b FROM Build b WHERE b.moduleId=:mid "
                + " ORDER BY b.change.svnlog.date DESC"
                );
        q.setParameter("mid", moduleId);
        q.setFirstResult(offset);
        q.setMaxResults(len);
        List<Build> l = q.getResultList();
        ret = new Build[l.size()];
        l.toArray(ret);
        return ret;
    }
    
    /** special method to get build log.  log is XmlTransient
     * on Build, because they tend to be large...
     */
    public String getBuildLog(@WebParam(name = "build_id")int id) {
        Build b = getEM().find(Build.class, id);
        return b.getLog();
    }
        
    public SvnlogPath[] getSvnlogsForRevision(@WebParam(name = "change_id")int changeid) {
        SvnlogPath[] ret = null;
        Svnlog svn = getSvnlogByChangeId(changeid);
        if (svn != null) {
            Collection<SvnlogPath> coll = svn.getSvnlogPathList();
            ret = new SvnlogPath[coll.size()];
            coll.toArray(ret);
        }
        return ret;
    }

    public String echo(@WebParam(name = "param")String param) {
//        p("echo() called");
        return param;
    }
    
    @WebMethod(exclude = true)
    private static List runQuery(String from, String where, int offset, int len) {
       if (where == null) { where = ""; }    
       String qstr = from + ' ' + where;
       System.err.println("gauntletService: running query '" + qstr + "'");
       try {
         Query q = getEM().createQuery(qstr);
         q.setFirstResult(offset);
         q.setMaxResults(len);
         return q.getResultList();
       } catch (RuntimeException re) {
          re.printStackTrace();
          throw re;
       }
    }
    
    @WebMethod(exclude = true)
    private static EntityManager getEM() {
        return EJB.getEntityManager();
    }
}
